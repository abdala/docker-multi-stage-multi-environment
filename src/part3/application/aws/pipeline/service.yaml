Description:
  This template create ECS service to run the API
  
Parameters:

  ApplicationKey:
    Type: String

  CommitHash:
    Type: String

Resources:

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: talk-execution-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: talk-task-role
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: APP_KEY
              Value: !Ref ApplicationKey
            - Name: AWS_REGION
              Value: !Ref 'AWS::Region'
            - Name: LOG_CHANNEL
              Value: errorlog
            - Name: APP_DEBUG
              Value: 1
          Essential: true
          Image: !Join ['', [!ImportValue ECRRegistry, 'talk:', !Ref CommitHash]]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: task
          MemoryReservation: 450
          Name: talk
          PortMappings:
            - ContainerPort: '80'
          Privileged: 'false'
      Cpu: 256
      Memory: 512
      Family: talk
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref ExecutionRole
      TaskRoleArn: !Ref TaskRole
      RequiresCompatibilities: [FARGATE]

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 120
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      HealthCheckPath: /
      Matcher:
        HttpCode: 200
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 10
      UnhealthyThresholdCount: 3
      TargetType: ip
      VpcId: !ImportValue VPC

  HttpListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          Values:
           - '/api/*'
      ListenerArn: !ImportValue PublicHttpListener
      Priority: 1

  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !ImportValue ClusterName
      LaunchType: 'FARGATE'
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: talk
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !ImportValue FargateContainerSecurityGroup
          Subnets: !Split [',', !ImportValue PrivateSubnets]
      TaskDefinition: !Ref TaskDefinition
